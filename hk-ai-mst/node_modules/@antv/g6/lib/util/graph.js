/**
 * @fileOverview graph util
 * @author huangtonger@aliyun.com
 */
var BaseUtil = require('./base');

var DomUtil = require('./dom');

var GraphicUtil = require('./graphic');

var G = require('@antv/g/lib');

module.exports = {
  /**
   * determine whether a node
   * @param  {object}  item item
   * @return {boolean} bool
   */
  isNode: function isNode(item) {
    return item && BaseUtil.isObject(item) && item.type === 'node';
  },

  /**
   * determine whether a edge
   * @param  {object}  item item
   * @return {boolean} bool
   */
  isEdge: function isEdge(item) {
    return item && BaseUtil.isObject(item) && item.type === 'edge';
  },

  /**
   * determine whether a group
   * @param  {object}  item item
   * @return {boolean} bool
   */
  isGroup: function isGroup(item) {
    return item && BaseUtil.isObject(item) && item.type === 'group';
  },

  /**
   * graph to Canvas
   * @param  {object}  options item
   * @return {domobject} canvas
   */
  graph2Canvas: function graph2Canvas(options) {
    options = BaseUtil.mix({
      graph: null,
      width: null,
      height: null,
      canvas: null,
      beforeTransform: function beforeTransform() {},
      afterTransform: function afterTransform() {}
    }, options);
    var _options = options,
        graph = _options.graph,
        width = _options.width,
        height = _options.height,
        canvas = _options.canvas,
        beforeTransform = _options.beforeTransform,
        afterTransform = _options.afterTransform;
    var graphCanvas = graph.getCanvas();
    var graphBBox = graph.getBBox();
    var padding = graph.getFitViewPadding();
    var children = graphCanvas.get('children');
    var matrixCache = BaseUtil.cloneDeep(graph.getMatrix());

    if (!canvas) {
      var containerDOM = DomUtil.createDOM('<canvas></canvas>');
      canvas = new G.Canvas({
        containerDOM: containerDOM,
        width: width,
        height: height
      });
    }

    var matrix = GraphicUtil.getAutoZoomMatrix({
      minX: 0,
      minY: 0,
      maxX: width,
      maxY: height
    }, graphBBox, padding);
    beforeTransform(matrix, matrixCache);
    graph.setMatrix(matrix);
    canvas.set('children', children);
    canvas.matrix = matrix; // canvas.draw();

    canvas._cfg.painter.beforeDraw();

    canvas._cfg.painter._drawGroup(canvas);

    graph.setMatrix(matrixCache);
    afterTransform(matrix, matrixCache);
    return canvas.get('el');
  }
};