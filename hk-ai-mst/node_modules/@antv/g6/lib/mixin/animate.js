/**
 * @fileOverview animate mixin
 * @author huangtonger@aliyun.com
 */
var Util = require('../util/');

var Global = require('../global');

var Animate = require('../controller/animate');

var Mixin = {};
Mixin.INIT = '_initAnimate';
Mixin.CFG = {
  /**
   * animate switch
   * @type {boolean}
   */
  animate: false,

  /**
   * animate force prevent
   * @type {boolean}
   */
  forcePreventAnimate: false,
  _enterAnimate: function _enterAnimate(item) {
    var group = item.getGraphicGroup();
    if (!item.getKeyShape()) return;
    var box = item.getBBox();
    var centerX = (box.minX + box.maxX) / 2;
    var centerY = (box.minY + box.maxY) / 2;
    Util.scaleIn(group, centerX, centerY);
  },
  _leaveAnimate: function _leaveAnimate(item) {
    var group = item.getGraphicGroup();

    if (!item.getKeyShape()) {
      group.remove();
      return;
    }

    var box = item.getBBox();
    var centerX = (box.minX + box.maxX) / 2;
    var centerY = (box.minY + box.maxY) / 2;
    Util.scaleOut(group, centerX, centerY, function () {
      group.remove();
    });
  },
  _updateAnimate: function _updateAnimate(element, props, visibleAction) {
    if (visibleAction === 'show') {
      var item = element.item;
      var box = item.getBBox();
      var centerX = (box.minX + box.maxX) / 2;
      var centerY = (box.minY + box.maxY) / 2;
      Util.scaleIn(element, centerX, centerY);
    } else if (visibleAction === 'hide') {
      element.show();
      var _item = element.item;

      var _box = _item.getBBox();

      var _centerX = (_box.minX + _box.maxX) / 2;

      var _centerY = (_box.minY + _box.maxY) / 2;

      Util.scaleOut(element, _centerX, _centerY, function () {
        element.hide();
      });
    } else {
      element.animate(props, Global.updateDuration, Global.updateEasing);
    }
  }
};
Mixin.AUGMENT = {
  _initAnimate: function _initAnimate() {
    var controllers = this.get('_controllers');
    var animate = this.get('animate');
    var canvas = this.get('_canvas');
    var animateController;

    if (animate) {
      animateController = new Animate({
        canvases: [canvas],
        graph: this
      });
      controllers.animate = animateController;
      var animateDraw = Util.debounce(function () {
        animateController.run();
      }, 450);
      this.set('_animateDraw', animateDraw);
    }
  }
};
module.exports = Mixin;